#!/usr/bin/env bash

#colors
export red="\033[1;31m"
export green="\033[1;32m"
export yellow="\033[1;33m"
export blue="\033[1;34m"
export purple="\033[1;35m"
export lpurple="\033[0;35m"
export cyan="\033[1;36m"
export grey="\033[0;37m"
export reset="\033[m"
export orange="\033[0;33m"

#clear custom cls
function cls() {
    clear
    echo "login: `date` on console."
}

#update/upgrade progress-bar
function progress-bar-up() {
    i=0
    echo -e "${yellow}Update Sequence Activated ...$reset"
    echo -e "${green}[$reset ${blue}status$reset                                                  ${green}]$reset ${cyan}$i%$reset"
    sleep 0.4
    clear
    ((i=i+3))
    echo -e "${yellow}Update Sequence Activated ...$reset"
    echo -e "${green}[$reset ${blue}status$reset #                                                ${green}]$reset ${cyan}$i%$reset"
    sleep 0.8
    clear
    ((i=i+5))
    echo -e "${yellow}Checking ...$reset"
    echo -e "${green}[$reset ${blue}status$reset ####                                             ${green}]$reset ${cyan}$i%$reset"
    echo "junk log entry `date`" >> ~/.jLog
    echo "~" >> ~/.jLog
    sleep 0.6
    clear
    ((i=i+25))
    echo -e "${yellow}Updating ...$reset"
    echo -e "${green}[$reset ${blue}status$reset ##############                                   ${green}]$reset ${cyan}$i%$reset"
    sudo apt-get update -y >> ~/.jLog
    echo "~" >> ~/.jLog
    clear
    ((i=i+32))
    echo -e "${yellow}Updating ...$reset"
    echo -e "${green}[$reset ${blue}status$reset ###################################              ${green}]$reset ${cyan}$i%$reset"
    sudo apt-get upgrade -y >> ~/.jLog
    echo "~" >> ~/.jLog
    clear
    ((i=i+23))
    echo -e "${yellow}Validating ...$reset"
    echo -e "${green}[$reset ${blue}status$reset ############################################     ${green}]$reset ${cyan}$i%$reset"
    sudo apt-get dist-upgrade -y >> ~/.jLog
    echo "~" >> ~/.jLog
    clear
    ((i=i+12))
    echo -e "${yellow}Validating ...$reset"
    echo -e "${green}[$reset ${blue}status$reset ################################################ ${green}]$reset ${cyan}$i%$reset"
    sleep 0.9
    clear
    echo -e "${green}done.$reset"
    sleep 3s
    cls
}

#conda-install progress bar
function progress-bar-conda-install() {
    i=0
    echo -e "${yellow}Preparing to install MiniConda ...$reset"
    echo -e "${green}[$reset ${blue}status$reset                                                  ${green}]$reset ${cyan}$i%$reset"
    sleep 0.4
    clear
    ((i=i+2))
    echo -e "${yellow}Preparing to install MiniConda ...$reset"
    echo -e "${green}[$reset ${blue}status$reset #                                                ${green}]$reset ${cyan}$i%$reset"
    sleep 0.8
    echo "Junk log entry: `date`" >> ~/.jLog
    echo "~" >> ~/.jLog
    sudo apt-get install curl -y >> ~/.jLog #task
    curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash >> /.jLog
    sudo apt-get install git-lfs >> ~/.jLog
    clear
    ((i=i+6))
    echo -e "${yellow}Preparing to install MiniConda ...$reset"
    echo -e "${green}[$reset ${blue}status$reset ####                                             ${green}]$reset ${cyan}$i%$reset"
    sleep 0.6
    clear
    ((i=i+20))
    echo -e "${yellow}Downloading data ...$reset"
    echo -e "${green}[$reset ${blue}status$reset ##############                                   ${green}]$reset ${cyan}$i%$reset"
    cd ~ #task 1
    gh repo clone d33pster/assets -- -q #task
    cd assets
    clear
    ((i=i+42))
    echo -e "${yellow}Downloading data ...$reset"
    echo -e "${green}[$reset ${blue}status$reset ###################################              ${green}]$reset ${cyan}$i%$reset"
    git lfs pull >> ~/.jLog
    echo "~" >> /.jLog
    clear
    ((i=i+18))
    echo -e "${yellow}Validating ...$reset"
    echo -e "${green}[$reset ${blue}status$reset ############################################     ${green}]$reset ${cyan}$i%$reset"
    sleep 0.5
    clear
    ((i=i+12))
    echo -e "${yellow}Validating ...$reset"
    echo -e "${green}[$reset ${blue}status$reset ################################################ ${green}]$reset ${cyan}$i%$reset"
    sleep 0.9
    clear
    echo -e "${green}done.$reset"
    sleep 3s
    clear
    bash ~/assets/conda.sh #task 3
}

#git short add commit push
function gap() {
    echo -e "${yellow}adding all files ...$reset"
    git add *
    git add .*
    
    echo "junk log entry `date`" >> ~/.jLog
    echo "~" >> ~/.jLog
    
    if [ -z "$1" ];
    then
    echo " "
    echo -e "${yellow}commiting Changes ...$reset"
    echo " "
    git commit -m "adding files" >> ~/.jlog
    else
    echo " "
    echo -e "${yellow}commiting Changes with msg $1 $reset"
    echo " "
    git commit -m "$1" >> ~/.jLog
    fi

    echo " "
    echo -e "${yellow}Pushing ...$reset"
    echo " "
    git push origin main >> ~/.jLog
    echo "~" >> ~/.jLog
    echo " "
    echo -e "${green}done$reset"
    sleep 1.5
    cls
}

#cc progress bar
function progress-bar-cc() {
    i=0
    echo -e "${yellow}Checking ...$reset"
    echo -e "${green}[$reset ${blue}status$reset                                                  ${green}]$reset ${cyan}$i%$reset"
    sleep 0.4
    clear
    ((i=i+2))
    echo -e "${yellow}Checking...$reset"
    echo -e "${green}[$reset ${blue}status$reset #                                                ${green}]$reset ${cyan}$i%$reset"
    sleep 0.8
    clear
    ((i=i+6))
    echo -e "${yellow}Checking ...$reset"
    echo -e "${green}[$reset ${blue}status$reset ####                                             ${green}]$reset ${cyan}$i%$reset"
    sleep 0.6
    clear
    ((i=i+20))
    echo -e "${yellow}Syncing Remote Data ...$reset"
    echo -e "${green}[$reset ${blue}status$reset ##############                                   ${green}]$reset ${cyan}$i%$reset"
    cd ~ #task 0
    gh repo clone d33pster/custombash -- -q #task 1
    clear
    ((i=i+35))
    echo -e "${yellow}Syncing Remote Data ...$reset"
    echo -e "${green}[$reset ${blue}status$reset ###################################              ${green}]$reset ${cyan}$i%$reset"
    cd ~/custombash #task2
    sleep 0.7
    clear
    ((i=i+18))
    echo -e "${yellow}Validating ...$reset"
    echo -e "${green}[$reset ${blue}status$reset ############################################     ${green}]$reset ${cyan}$i%$reset"
    sleep 1
    if diff -q ~/.custom-linux-bash ~/custombash/.custom-linux-bash &>/dev/null; #task 3
    then
        clear
        i=100
        echo -e "${green}Configuration unchanged.$reset"
        cd ~
        echo -e "${green}[$reset ${blue}status$reset ################################################ ${green}]$reset ${cyan}$i%$reset"
        sleep 2.5
        clear
    else
        clear
        ((i=i+14))
        echo -e "${yellow}Saving new Configuration ...$reset"
        cp ~/.custom-linux-bash ~/custombash/.custom-linux-bash #task 4
        echo -e "${green}[$reset ${blue}status$reset ############################################     ${green}]$reset ${cyan}$i%$reset"
        sleep 2
        clear
        echo -e "${green}Saved. $reset"
        echo -e "${green}[$reset ${blue}status$reset ############################################     ${green}]$reset ${cyan}$i%$reset"
        sleep 3
        clear
        ((i=i+2))
        echo -e "${yellow}Alterting Remote Repo ...$reset"
        echo -e "${green}[$reset ${blue}status$reset ##############################################   ${green}]$reset ${cyan}$i%$reset"
        sleep 0.8
        read version < ~/custombash/.version-lin #pseudo-task ~ version control
        ((version=version+0.1)) #pseudo-task ~ version control
        printf "%.1f" $version > ~/custombash/.version-lin #pseudo-task ~ version control
        read version < ~/custombash/.version-lin #pseudo-task ~ version control
        cp ~/custombash/.allover ~/.allover
        read allover < ~/.allover #pseudo-task ~ version control ~ read allover version
        ((allover=allover+0.1)) #pseudo-task ~ version control ~ update allover version
        printf "%.1f" $allover > ~/.allover #pseudo-task ~ version control ~ update all over version
        read allover < ~/.allover #pseudo-task ~ version control ~ read new allover version
        cp ~/custombash/README.md ~/custombash/README.backup # attach allover version to the bottom of readme
        sed '$d' ~/custombash/README.backup > ~/custombash/README.md # attach allover version to the bottom of readme
        echo "v$allover" >> ~/custombash/README.md # attach allover version to the bottom of readme
        git add README.md &> ~/junk
        git commit -m "README" &> ~/junk
        rm -rf ~/custombash/README.backup #rem extra
        rm -rf ~/custombash/.allover
        gap "update v$version" &> ~/junk #task 6
        cp ~/.allover ~/custombash/.allover #pseudo-task ~ version control
        git add .allover
        git commit -m "v$allover" &> ~/junk
        git push origin main &> ~/junk
        rm -rf ~/junk
        cd .. #task 7
        ((i=i+3))
        clear
        echo -e "${green}Custom Commands updated.$reset"
        echo -e "${green}[$reset ${blue}status$reset ################################################ ${green}]$reset ${cyan}$i%$reset"
        sleep 1.5
        clear
    fi
    echo -e "${green}done.$reset"
    sleep 1
}

#self interest
function help() {
    clear
    read version < ~/.allover
    echo -e "${yellow}CUSTOM BASHER ${green}v$version$reset"
    echo -e "${cyan}author --> d33pster ${blue}:: ${cyan}email --> deep.main.ac@gmail.com$reset"
    echo ""
    echo -e "${red}?-- help --?$reset"
    echo " "
    echo -e "${green}setup$reset ~ add source files to .zshrc"
    echo -e "${green}up$reset ~ update/upgrade linux"
    echo -e "${green}cls$reset ~ clear"
    echo -e "${green}get$reset ~ package installer ~ ${orange}args: <package-name>$reset"
    echo -e "${green}log$reset ~ show custom commands junk output log ~ ${red}press [enter] to exit$reset"
    echo -e "${green}reps$reset ~ list repos"
    echo -e "${green}gst$reset ~ git status"
    echo -e "${green}gl $reset~ git log"
    echo -e "${green}gap$reset ~ git add commit push ~ ${orange}args: <commit-msg>$reset (default - adding files)"
    echo -e "${green}gcl$reset ~ git clone ~ ${orange}args: <username> <repo-name> <optional-clone-destination>$reset"
    echo -e "${green}ghcli-in$reset ~ install GitHub CLI"
    echo -e "${green}ghcli-up$reset ~ update/upgrade GitHub CLI"
    echo -e "${green}ghcli-init$reset ~ git login"
    echo -e "${green}ghcli-end$reset ~ git logout"
    echo -e "${green}ghcli$reset ~ git auth status"
    echo -e "${green}gconfig-ue$reset ~ git global username and email ~ ${orange}args: <username> <user-email>$reset"
    echo -e "${green}gconfig$reset ~ view or edit .gitconfig ~ ${orange}args: <editor>$reset"
    echo -e "${green}f$reset ~ view current dir or speecified directory ~ ${orange}args: <optional-dir-path>$reset"
    echo -e "${green}conda-install$reset ~ install conda ~ ${red}requires ghcli login(${reset}${cyan}d33pster${reset}${red})$reset"
    echo -e "${green}gp-main$reset ~ push to main"
    echo -e "${green}gadd$reset ~ add all files to git index"
    echo -e "${green}gcom$reset ~ git commit ~ ${orange}args: <optional-commit-msg>"
    echo " "
}

#log function
function log() {
    clear
    cat ~/.jLog
    echo -n ": "
    read q
    cls
}


#self change
function cc() {
    if [ -z "$1" ];
    then sudo nano ~/.custom-linux-bash
    else
    sudo $1 ~/.custom-linux-bash
    fi

    clear

    progress-bar-cc

    sudo rm -rf ~/custombash
    sleep 2
    cls
}

#git status short
function gst() {
    clear
    echo -e "${yellow}Current Repo Stat: $reset"
    echo " "
    git status
    echo " "
    echo "login: `date` on console."
}

#git log shortcut
function gl() {
    clear
    git log
    cls
}


#automate gitclone ~ remove "./" necessity using gc-lin
function gcl() {
    clear
    
    if [ -z "$1" ];
    then
    echo -e "${red}-- Args not Provided --$reset"
    sleep 1
    echo " "
    echo -e "${yellow}resetting ...$reset"
    sleep 2
    cls
    return 0
    fi
    
    echo -e "${yellow} clone sequence init.$reset"
    echo ""
    
    if [ -z "$3" ];
    then ~/gc-lin $1 $2
    else ~/gc-lin $1 $2 $3
    fi

    echo " "
    echo -e "${yellow}changing directory ... $reset"
    sleep 2
    cls

    if [ -z "$3" ];
    then 
        cd $2
        echo -e "${orange}$2/ -->$reset"
    else 
        cd "$3/$2"
        echo -e "${orange}$3/$2/ -->$reset"
    fi

    ls -a
}


#github cli install
function ghcli-in() {
    clear
    echo -e "${yellow}Installing GitHub-CLI ...$reset"
    sleep 3
    echo "\n"
    type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
    && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    && sudo apt update \
    && sudo apt install gh -y
    clear
    echo -e "${green}done.$reset"
    sleep 5
    cls
}

#github cli update
function ghcli-up() {
    clear
    echo -e "${orange}update sequence activated.$reset"
    sleep 3
    clear
    sudo apt install --upgrade gh
    clear
    echo -e "${green}updated.$reset"
    sleep 3
    cls
    gh --version
}

#cli login
function ghcli-init() {
    clear
    gh auth login
    clear
    echo -e "${green}init complete.$reset"
    sleep 3
    cls
}

#cli logout
function ghcli-end() {
    clear
    gh auth logout
    clear
    echo -e "${green}session ended.$reset"
    sleep 3
    cls
}

#cli auth status
function ghcli() {
    clear
    echo -e "${yellow} Current Configuration: $reset"
    echo " "
    gh auth status
    sleep 5
    cls
}

#git config add username useremail
function gconfig-ue() {
    clear

    if [ -z "$1" ];
    then
        echo -e "${red}parameter missing.$reset"
        sleep 3
        cls
        return 0
    fi

    echo -e "${yellow}Configuring ...$reset"
    git config --global user.name "$1"
    git config --global user.email "$2"
    sleep 1
    clear
    echo -e "${green}done.$reset"
    sleep 3
    cls
}

#view (default) or edit(param) .gitconfig
function gconfig() {
    clear

    if [ -z "$1" ];
    then
        echo -e "${yellow}?-- Git CONFIG --?$reset"
        echo " "
        git config --list
        return 0
    else
        $1 ~/.gitconfig
        cls
        return 0
    fi
    echo ""
    echo "login: `date` on console."
}

#list current dir or given
function f() {
    cls
    echo ""
    
    curr=$(pwd)
    
    if [ -z "$1" ];
    then
        current_directory=```exec pwd```
        echo -e "${orange}$current_directory/ -->$reset"
        ls -a
        return 0
    else
        echo -e "${orange}$1/ -->$reset"
        ls -a $1
        return 0
    fi
    
    echo ""
    cd $curr
}

#conda install ~ requires github cli and login ~ d33pster
function conda-install() {
    sudo clear

    progress-bar-conda-install
    
    clear
    echo -e "${green}conda installed.$reset"
    sleep 2
    clear
    echo -e "${yellow}Checking for updates ..."
    sleep 1
    conda_base=$(conda info --base)
    conda_source="${conda_base}/etc/profile.d/conda.sh"
    source $conda_source
    echo "junk log entry `date`" >> ~/.jLog
    echo "~" >> ~/.jLog
    conda update -n base -c defaults conda -y &>> ~/.jLog
    echo "~" >> ~/.jLog
    sleep 1
    clear
    echo -e "${green}done.$reset"
    cd ~
    rm -rf assets
    sleep 5
    cls
}

#git add short
function gadd() {
    clear
    echo -e "${yellow}Adding all files to the git index ...$reset"
    echo "junk log entry `date`" >> ~/.jLog
    echo "~" >> ~/.jLog
    git add * >> ~/.jLog 
    git add .* >> ~/.jLog
    echo "~" >> ~/.jLog
    sleep 1
    clear
    echo -e "${green}done.$reset"
    sleep 2
    cls
}

#git push short
function gp-main() {
    clear
    echo -e "${yellow}Pushing to main branch ...$reset"
    echo " "
    git push origin main
    echo " "
    sleep 1
    echo " "
    clear
    echo -e "${green}done.$reset"
    sleep 5
    cls
}

#repo list
function reps() {
    cls
    echo -e "${orange}Repos Found: $reset"
    gh repo list
}

#linux-update
function up() {
    sudo clear #for better performance - look good
    progress-bar-up
}

#cc-up
function cc-up() {
    clear
    progress-bar-cc
    rm -rf ~/custombash
    cls
}

#function to download and install a package
function get() {
    sudo clear #performance issue fix
    echo -e "${yellow}Checking and Downloading ..."
    sleep 1.5
    echo "junk log entry `date`" >> ~/.jLog
    echo "~" >> ~/.jLog
    sudo apt-get install $1 -y >> ~/.jLog
    echo "~" >> ~/.jLog
    clear
    echo -e "${green}done.$reset"
    sleep 2
    cls
    $1 --version
}

#function for git commit
function gcom() {
    clear
    if [ -z "$1" ]; then
    	git commit
    	clear
    	echo -e "${green}done.$reset"
    	sleep 2
    	cls
    else
    	echo -e "${yellow}commiting with msg $1 ...$reset"
    	sleep 1
    	git commit -m $1
    	clear
    	echo -e "${green}done.$reset"
    	sleep 2
    	cls
    fi
}

#function cc-edit for just editing
function cc-edit() {
    clear
    if [ -z "$1" ]; then
        sudo nano ~/.custom-linux-bash
    else
    	sudo $1 ~/.custom-linux-bash
    fi
    
    clear
    echo -e "${green}custom commands updated in local machine. ${red}Remote repo not updated.$reset"
    echo ""
    echo -e "${green} \$ ${blue}cc-up ${yellow} to update repo.$reset"
    echo -ne "${cyan}<-- Restart terminal to refresh -->$reset"
    read choke
    exit
}
