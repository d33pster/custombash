#!/usr/bin/env bash

#colors
export red="\033[1;31m"
export green="\033[1;32m"
export yellow="\033[1;33m"
export blue="\033[1;34m"
export purple="\033[1;35m"
export cyan="\033[1;36m"
export grey="\033[0;37m"
export reset="\033[m"
export orange="\033[0;33m"

#clear custom cls
function cls() {
    clear
    echo "login: `date` on console."
}

#self interest
function help() {
    cls
    echo "${yellow}?-- help --?$reset"
    echo " "
    echo "${cyan}}cls$reset ~ clear"
    echo "${cyan}cc$reset ~ edit custom commands ~ ${orange}args: <editor>$reset"
    echo "${cyan}cc-up$reset ~ update remote repository"
    echo "${cyan}brew-init$rest ~ install brew"
    echo "${cyan}brew-up$reset ~ update brew"
    echo "${cyan}get$reset ~ install a package using brew ~ ${orange}args: <package-name>$reset"
    echo "${cyan}getc$reset ~ install a packaged using brew with --cask ~ ${orange}args: <package-name>$reset"
    echo "${cyan}upg$reset ~ upgrade an existing package ~ ${orange}args: <package-name>$reset ~ ${red}requires brew$reset"
    echo "${cyan}log$reset ~ show custom commands junk output log ~ ${red}press [enter] to exit$reset"
    echo "${cyan}reps$reset ~ list repos"
    echo "${cyan}gst$reset ~ git status"
    echo "${cyan}gl $reset~ git log"
    echo "${cyan}gap$reset ~ git add commit push ~ ${orange}args: <commit-msg>$reset (default - adding files)"
    echo "${cyan}gcl$reset ~ git clone ~ ${orange}args: <username> <repo-name> <optional-clone-destination>$reset"
    echo "${cyan}ghcli-in$reset ~ install GitHub CLI"
    echo "${cyan}ghcli-up$reset ~ update/upgrade GitHub CLI"
    echo "${cyan}ghcli-init$reset ~ git login"
    echo "${cyan}ghcli-end$reset ~ git logout"
    echo "${cyan}ghcli$reset ~ git auth status"
    echo "${cyan}gconfig-ue$reset ~ git global username and email ~ ${orange}args: <username> <user-email>$reset"
    echo "${cyan}gconfig$reset ~ view or edit .gitconfig ~ ${orange}args: <editor>$reset"
    echo "${cyan}f$reset ~ view current dir or speecified directory ~ ${orange}args: <optional-dir-path>$reset"
    echo "${cyan}gp-main$reset ~ push to main"
    echo "${cyan}gadd$reset ~ add all files to git index"
    echo "${cyan}gcom$reset ~ git commit ~ ${orange}args: <optional-commit-msg>"
    echo " "
}

#cc progress bar
function progress-bar-cc() {
    i=0
    echo "${yellow}Checking ...$reset"
    echo "${green}[$reset ${blue}status$reset                                                  ${green}]$reset ${cyan}$i%$reset"
    sleep 0.4
    clear
    ((i=i+2))
    echo "${yellow}Checking...$reset"
    echo "${green}[$reset ${blue}status$reset #                                                ${green}]$reset ${cyan}$i%$reset"
    sleep 0.8
    clear
    ((i=i+6))
    echo "${yellow}Checking ...$reset"
    echo "${green}[$reset ${blue}status$reset ####                                             ${green}]$reset ${cyan}$i%$reset"
    sleep 0.6
    clear
    ((i=i+20))
    echo "${yellow}Syncing Remote Data ...$reset"
    echo "${green}[$reset ${blue}status$reset ##############                                   ${green}]$reset ${cyan}$i%$reset"
    cd ~ #task 0
    gh repo clone d33pster/custombash -- -q #task 1
    clear
    ((i=i+35))
    echo "${yellow}Syncing Remote Data ...$reset"
    echo "${green}[$reset ${blue}status$reset ###################################              ${green}]$reset ${cyan}$i%$reset"
    cd ~/custombash #task2
    sleep 0.7
    clear
    ((i=i+18))
    echo "${yellow}Validating ...$reset"
    echo "${green}[$reset ${blue}status$reset ############################################     ${green}]$reset ${cyan}$i%$reset"
    sleep 1
    if diff -q ~/.custom-macOs-bash ~/custombash/.custom-macOs-bash &>/dev/null; #task 3
    then
        clear
        i=100
        echo "${green}Configuration unchanged.$reset"
        cd ~
        echo "${green}[$reset ${blue}status$reset ################################################ ${green}]$reset ${cyan}$i%$reset"
        sleep 2.5
        clear
    else
        clear
        ((i=i+14))
        echo "${yellow}Saving new Configuration ...$reset"
        cp ~/.custom-macOs-bash ~/custombash/.custom-macOs-bash #task 4
        echo "${green}[$reset ${blue}status$reset ############################################     ${green}]$reset ${cyan}$i%$reset"
        sleep 2
        clear
        echo "${green}Saved. $reset"
        echo "${green}[$reset ${blue}status$reset ############################################     ${green}]$reset ${cyan}$i%$reset"
        sleep 3
        clear
        ((i=i+2))
        echo "${yellow}Alterting Remote Repo ...$reset"
        echo "${green}[$reset ${blue}status$reset ##############################################   ${green}]$reset ${cyan}$i%$reset"
        sleep 0.8
        read version < ~/custombash/.version-mac #pseudo-task ~ version control
        ((version=version+0.1)) #pseudo-task ~ version control
        printf "%.1f" $version > ~/custombash/.version-mac #pseudo-task ~ version control
        read version < ~/custombash/.version-mac #pseudo-task ~ version control
        read allover < ~/.allover #pseudo-task ~ version control
        ((allover=allover+0.1)) #pseudo-task ~ version control
        printf "%.1f" $allover > ~/.allover #pseudo-task ~ version control
        read allover < ~/.allover #pseudo-task ~ version control
        cp ~/custombash/README.MD ~/custombash/README.backup
        sed '$d' ~/custombash/README.backup > ~/custombash/README.md
        echo "####### version = $allover" >> ~/custombash/README.md
        echo "~" >> ~/custombash/README.md
        git add README.md > ~/junk
        git commit -m "README" > ~/junk
        rm -rf ~/junk
        rm -rf ~/custombash/README.backup
        rm -rf ~/custombash/README.backup.backup
        cp ~/.allover ~/custombash/.allover #pseudo-task ~ version control
        echo " "
        echo " "
        gap "update v$version" #task 6
        cd .. #task 7
        ((i=i+3))
        echo "${green}Custom Commands updated.$reset"
        echo "${green}[$reset ${blue}status$reset ################################################ ${green}]$reset ${cyan}$i%$reset"
        sleep 1.5
        clear
    fi
    echo "${green}done.$reset"
    sleep 1
}

#self change
function cc() {
    if [ -z "$1" ];
    then sudo nano ~/.custom-macOs-bash
    else
    sudo $1 ~/.custom-macOs-bash
    fi

    clear

    progress-bar-cc

    sudo rm -rf ~/custombash
    sleep 2
    cls
}

#log function
function log() {
    clear
    cat ~/.jLog
    echo -n ": "
    read q
    cls
}

#git short commit
function gap() {
    clear
    echo "${yellow}adding all files ...$reset"
    git add *
    git add .*
    
    echo "junk log entry `date`" >> ~/.jLog
    echo "~" >> ~/.jLog
    
    if [ -z "$1" ];
    then
    echo " "
    echo "${yellow}commiting Changes ...$reset"
    echo " "
    git commit -m "adding files" >> ~/.jlog
    else
    echo " "
    echo "${yellow}commiting Changes with msg $1 $reset"
    echo " "
    git commit -m "$1" >> ~/.jLog
    fi

    echo " "
    echo "${yellow}Pushing ...$reset"
    echo " "
    git push origin main >> ~/.jLog
    echo "~" >> ~/.jLog
    echo " "
    echo "${green}done$reset"
    sleep 1.5
    cls
}

#git status short
function gst() {
    clear
    echo "${yellow}Current Repo Stat: $reset"
    echo " "
    git status
    echo " "
}

#git log shortcut
function gl() {
    clear
    git log
    cls
}

#automate gitclone ~ remove "./" necessity
function gcl() {
    cls
    
    if [ -z "$1" ];
    then
    echo "${red}-- Args not Provided --$reset"
    sleep 1
    echo " "
    echo "${yellow}resetting ...$reset"
    sleep 2
    clear
    return 0
    fi

    if [ -z "$3" ];
    then ~/gc-lin $1 $2
    else ~/gc-lin $1 $2 $3
    fi

    echo " "
    echo "${yellow}changing directory ... $reset"
    sleep 2
    cls

    if [ -z "$3" ];
    then 
        cd $2
        echo "${orange}$2/ -->$reset"
    else 
        cd "$3/$2"
        echo "${orange}$3/$2/ -->$reset"
    fi

    ls
}

#install brew
function brew-init() {
    clear
    echo -n "${yellow}Preparing to Install brew ... $reset"
    sleep 2
    echo "junk log entry `date`" >> ~/.jLog
    echo "~" >> ~/.jLog
    clear
    echo -n "${purple}Installing ...$reset"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" >> ~/.jLog
    echo "~" >> ~/.jLog
    clear
    echo "${green}done.$reset"
    sleep 3
    cls
}

#ghcli-in
function ghcli-in() {
    clear
    echo "${yellow}Installing GitHub-CLI ...$reset"
    sleep 3
    echo "junk log entry `date`" >> ~/.jLog
    echo "~" >> ~/.jLog
    brew install gh >> ~/.jLog
    echo "~" >> ~/.jLog
    clear
    echo "${green}done.$reset"
    sleep 5
    cls
}

#github cli update
function ghcli-up() {
    clear
    echo "${purple}update sequence activated.$reset"
    sleep 3
    clear
    echo "junk log entry `date`" >> ~/.jLog
    echo "~" >> ~/.jLog
    brew upgrade gh >> ~/.jLog
    echo "~" >> ~/.jLog
    clear
    echo "${green}updated.$reset"
    sleep 3
    cls
    gh --version
}

#cc-up
function cc-up() {
    clear
    progress-bar-cc
    rm -rf ~/custombash
    cls
}

#cli login
function ghcli-init() {
    clear
    gh auth login
    clear
    echo "${green}init complete.$reset"
    sleep 3
    cls
}

#cli logout
function ghcli-end() {
    clear
    gh auth logout
    clear
    echo "${green}session ended.$reset"
    sleep 3
    cls
}

#cli auth status
function ghcli() {
    clear
    echo "${yellow} Current Configuration: $reset"
    echo " "
    gh auth status
    sleep 5
    cls
}

#git config add username useremail
function gconfig-ue() {
    clear

    if [ -z "$1" ];
    then
        echo "${red}parameter missing.$reset"
        sleep 3
        cls
        return 0
    fi

    echo "${yellow}Configuring ...$reset"
    git config --global user.name "$1"
    git config --global user.email "$2"
    sleep 1
    clear
    echo "${green}done.$reset"
    sleep 3
    cls
}

#view (default) or edit(param) .gitconfig
function gconfig() {
    clear

    if [ -z "$1" ];
    then
        echo "${yellow}?-- Git CONFIG --?$reset"
        echo " "
        git config --list
        return 0
    else
        $1 ~/.gitconfig
        cls
        return 0
    fi
}

#list current dir or given
function f() {
    cls
    
    if [ -z "$1" ];
    then
        current_directory=```exec pwd```
        echo "${orange}$current_directory/ -->$reset"
        ls
        return 0
    else
        echo "${orange}$1/ -->$reset"
        ls $1
        return 0
    fi
}

#git add short
function gadd() {
    clear
    echo "${yellow}Adding all files to the git index ...$reset"
    git add * 
    git add .*
    sleep 1
    clear
    echo "${green}done.$reset"
    sleep 2
    cls
}

#git push short
function gp-main() {
    clear
    echo "${yellow}Pushing to main branch ...$reset"
    echo " "
    git push origin main
    echo " "
    sleep 1
    echo " "
    clear
    echo "${green}done.$reset"
    sleep 5
    cls
}

#repo list
function reps() {
    cls
    echo "${orange}Repos Found: $reset"
    gh repo list
}

#function for git commit
function gcom() {
    clear
    if [ -z "$1" ]; then
    	git commit
    	clear
    	echo "${green}done.$reset"
    	sleep 2
    	cls
    else
    	echo "${yellow}commiting with msg $1 ...$reset"
    	sleep 1
    	git commit -m $1
    	clear
    	echo "${green}done.$reset"
    	sleep 2
    	cls
    fi
}

#brew update
function brew-up() {
    clear
    echo "${purple}updating brew ...$reset"
    echo "junk log entry `date`" >> ~/.jLog
    echo "~" >> ~/.jLog
    brew update
    echo "~" >> ~/.jLog
    sleep 2
    clear
    echo "${green}done.$reset"
    sleep 2
    cls
}

#update any installed packages
function upg() {
    clear
    if [ -z "$1" ]; then
        echo "${red}No package specified!"
        sleep 2
        cls
        return 0
    fi

    echo  -n "using brew to update $1 ..."
    sleep 2
    echo " "
    echo " "
    echo " "
    brew upgrade $1
    echo " "
    echo "${green}done.$reset"
    sleep 2
    cls
}

#install a package using brew
function get() {
    clear
    if [ -z "$1" ]; then
        echo "${red}No package specified"
        sleep 2
        cls
        return 0
    fi

    echo -n "using brew to install $1 ..."
    sleep 2
    echo " "
    echo " "
    echo " "
    brew install $1
    echo " "
    echo "${green}done.$reset"
    sleep 2
    cls
}

#install a package using brew --cask
function getc() {
    clear
    if [ -z "$1" ]; then
        echo "${red}No package specified"
        sleep 2
        cls
        return 0
    fi

    echo -n "using brew to install cask $1 ..."
    sleep 2
    echo " "
    echo " "
    echo " "
    brew install --cask $1
    echo " "
    echo "${green}done.$reset"
    sleep 2
    cls
}