#!/usr/bin/env bash
#macOS
#colors
export red="\033[0;31m" #normal red
export green="\033[1;32m"
export yellow="\033[1;33m"
export blue="\033[1;34m"
export purple="\033[1;35m"
export cyan="\033[1;36m"
export grey="\033[0;37m"
export reset="\033[m"
export orange="\033[0;33m"
export lpurple="\033[1;35m"
export lred="\033[1;31m" #bold red
export lblue="\033[1;34m"
export lcyan="\033[1;36m"
export dgray="\033[1;30m"

#clear custom cls
function cls() {
    clear
    echo "login: `date` on console."
}

#LICENSE
function license() {
    clear
    read version < ~/.allover
    echo "${lpurple}CUSTOM BASHER ${lblue}v$version$reset"
    echo "${green}author: d33pster :: email: deep.main.ac@gmail.com$reset"
    echo " "
    echo "${lred}Copyright (c) 2023 Soumyo Deep Gupta (d33pster)"
    echo " "
    echo "Permission is hereby granted, free of charge, to any person obtaining a copy"
    echo "of this software and associated documentation files (the "Software"), to deal"
    echo "in the Software without restriction, including without limitation the rights"
    echo "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"
    echo "copies of the Software, and to permit persons to whom the Software is"
    echo "furnished to do so, subject to the following conditions:"
    echo " "
    echo "The above copyright notice and this permission notice shall be included in all"
    echo "copies or substantial portions of the Software."
    echo " "
    echo "THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
    echo "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
    echo "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"
    echo "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
    echo "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
    echo "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE"
    echo -n "SOFTWARE.$reset"
    read choke
    cls
}

#self interest
function help() {
    clear
    read version < ~/.allover
    echo "${lpurple}CUSTOM BASHER ${lred}v$version$reset"
    echo "${green}author: d33pster :: email: deep.main.ac@gmail.com$reset"
    echo " "
    echo "${lred}?-- help --?$reset"
    echo " "
    echo "${cyan}1.  cls$reset ~ clear"
    echo "${cyan}2.  license$reset ~ show license for CUSTOM BASHER"
    echo "${cyan}3.  cache-del$reset ~ clear caches"
    echo "${cyan}4.  cc$reset ~ edit custom commands ~ ${purple}args: <editor>$reset ~ ${red}only for dev$reset"
    echo "${cyan}5.  cc-up$reset ~ update remote repository ~ ${red}only for dev$reset"
    echo "${cyan}6.  brew-init$reset ~ install brew"
    echo "${cyan}7.  brew-up$reset ~ update brew"
    echo "${cyan}8.  get$reset ~ install a package using brew ~ ${purple}args: <package-name>$reset"
    echo "${cyan}9.  getc$reset ~ install a packaged using brew with --cask ~ ${purple}args: <package-name>$reset"
    echo "${cyan}10. upg$reset ~ upgrade an existing package ~ ${purple}args: <package-name>$reset ~ ${red}requires brew$reset"
    echo "${cyan}11. log$reset ~ show custom commands junk output log ~ ${red}press [enter] to exit$reset"
    echo "${cyan}12. reps$reset ~ list repos"
    echo "${cyan}13. gst$reset ~ git status"
    echo "${cyan}14. gl $reset~ git log"
    echo "${cyan}15. gap$reset ~ git add commit push ~ ${purple}args: <commit-msg>$reset (default - adding files)"
    echo "${cyan}16. gcl$reset ~ git clone ~ ${purple}args: <username> <repo-name> <optional-clone-destination>$reset"
    echo "${cyan}17. ghcli-in$reset ~ install GitHub CLI"
    echo "${cyan}18. ghcli-up$reset ~ update/upgrade GitHub CLI"
    echo "${cyan}19. ghcli-init$reset ~ git login"
    echo "${cyan}20. ghcli-end$reset ~ git logout"
    echo "${cyan}21. ghcli$reset ~ git auth status"
    echo "${cyan}22. gconfig-ue$reset ~ git global username and email ~ ${purple}args: <username> <user-email>$reset"
    echo "${cyan}23. gconfig$reset ~ view or edit .gitconfig ~ ${purple}args: <editor>$reset"
    echo "${cyan}24. f$reset ~ view current dir or speecified directory ~ ${purple}args: <optional-dir-path>$reset"
    echo "${cyan}25. gp-main$reset ~ push to main"
    echo "${cyan}26. gadd$reset ~ add all files to git index"
    echo "${cyan}27. gcom$reset ~ git commit ~ ${purple}args: <optional-commit-msg>"
    echo " "
    echo "${lred}~~ ADVANCED ~~$reset"
    echo " "
    echo "${purple}trigger$reset ~ ${blue}args: <app-name> (from /Applications - case insensitive), <optional-alias>,"
    echo "          <optional-new-name>, sys(optional)$reset"
    echo "     ${blue}~$reset ${green}usage:$reset 1. use this command to create cli command for macOs Applications"
    echo "              2. after calling this command close the terminal and open a new one"
    echo "              3. the new name arg changes the app name for this script only (just to look good)"
    echo "              4. also, for using the new name arg, all previous args must be used (this is valid for all "
    echo "                 commands which accept multiple args) (just use the same args before the new name arg)"
    echo "                 ${blue}~ ${red}example:$reset \$ trigger netflix netflix nateflix ~ here the trigger for netflix will be"
    echo "                 created with alias netflix (which realy doesnt matter ~ alias is the function name "
    echo "                 which u will be calling using the terminal) and the script will recognise netflix"
    echo "                 as nateflix (this is just for lookiing good XD)" 
    echo "              5. the last sys arg is optional and is for system apps like the ${cyan}'App Store'"
    echo "                 [<app-name>: 'App\ Store']; just add sys$reset"
    echo "     ${blue}~$reset ${green}example:$reset ~ 1. \$ trigger <app-name> <optional-alias> <optional-new-name> sys"
    echo "                     and then close the terminal"
    echo "                  2. \$ <app-name> or <alias> in new terminal"
    echo "${purple}trigger-show$reset"
    echo "     ${blue}~ ${green}usage:$reset show currently configured triggers."
    echo " "
}

#cc progress bar
function progress-bar-cc() {
    i=0
    echo "${yellow}Checking ...$reset"
    echo "${green}[$reset ${blue}status$reset                                                  ${green}]$reset ${cyan}$i%$reset"
    sleep 0.4
    clear
    ((i=i+2))
    echo "${yellow}Checking...$reset"
    echo "${green}[$reset ${blue}status$reset #                                                ${green}]$reset ${cyan}$i%$reset"
    sleep 0.8
    clear
    ((i=i+6))
    echo "${yellow}Checking ...$reset"
    echo "${green}[$reset ${blue}status$reset ####                                             ${green}]$reset ${cyan}$i%$reset"
    sleep 0.6
    clear
    ((i=i+20))
    echo "${yellow}Syncing Remote Data ...$reset"
    echo "${green}[$reset ${blue}status$reset ##############                                   ${green}]$reset ${cyan}$i%$reset"
    cd ~ #task 0
    gh repo clone d33pster/custombash -- -q #task 1
    clear
    ((i=i+35))
    echo "${yellow}Syncing Remote Data ...$reset"
    echo "${green}[$reset ${blue}status$reset ###################################              ${green}]$reset ${cyan}$i%$reset"
    cd ~/custombash #task2
    sleep 0.7
    clear
    ((i=i+18))
    echo "${yellow}Validating ...$reset"
    echo "${green}[$reset ${blue}status$reset ############################################     ${green}]$reset ${cyan}$i%$reset"
    sleep 1
    if diff -q ~/.custom-macOs-bash ~/custombash/.custom-macOs-bash &>/dev/null; #task 3
    then
        clear
        i=100
        echo "${green}Configuration unchanged.$reset"
        cd ~
        echo "${green}[$reset ${blue}status$reset ################################################ ${green}]$reset ${cyan}$i%$reset"
        sleep 2.5
        clear
    else
        clear
        ((i=i+14))
        echo "${yellow}Saving new Configuration ...$reset"
        cp ~/.custom-macOs-bash ~/custombash/.custom-macOs-bash #task 4
        echo "${green}[$reset ${blue}status$reset ############################################     ${green}]$reset ${cyan}$i%$reset"
        sleep 2
        clear
        echo "${green}Saved. $reset"
        echo "${green}[$reset ${blue}status$reset ############################################     ${green}]$reset ${cyan}$i%$reset"
        sleep 3
        clear
        ((i=i+2))
        echo "${yellow}Alterting Remote Repo ...$reset"
        echo "${green}[$reset ${blue}status$reset ##############################################   ${green}]$reset ${cyan}$i%$reset"
        sleep 0.8
        read version < ~/custombash/.version-mac #pseudo-task ~ version control ~ read version
        ((version=version+0.1)) #pseudo-task ~ version control ~ update version
        printf "%.1f" $version > ~/custombash/.version-mac #pseudo-task ~ version control ~ update version
        read version < ~/custombash/.version-mac #pseudo-task ~ version control ~ read new version
        read allover < ~/.allover #pseudo-task ~ version control ~ read allover version
        ((allover=allover+0.1)) #pseudo-task ~ version control ~ update allover version
        printf "%.1f" $allover > ~/.allover #pseudo-task ~ version control ~ update all over version
        read allover < ~/.allover #pseudo-task ~ version control ~ read new allover version
        cp ~/custombash/README.MD ~/custombash/README.backup # attach allover version to the bottom of readme
        sed '$d' ~/custombash/README.backup > ~/custombash/README.md # attach allover version to the bottom of readme
        echo "v$allover" >> ~/custombash/README.md # attach allover version to the bottom of readme
        git add README.md &> ~/junk
        git commit -m "README" &> ~/junk
        rm -rf ~/custombash/README.backup #rem extra
        gap "update v$version" &> ~/junk #task 6
        cp ~/.allover ~/custombash/.allover #pseudo-task ~ version control
        git add .allover
        git commit -m "v$allover" &> ~/junk
        git push origin main &> ~/junk
        rm -rf ~/junk
        cd .. #task 7
        ((i=i+3))
        clear
        echo "${green}Custom Commands updated.$reset"
        echo "${green}[$reset ${blue}status$reset ################################################ ${green}]$reset ${cyan}$i%$reset"
        sleep 1.5
        clear
    fi
    echo "${green}done.$reset"
    sleep 1
}

#self change
function cc() {
    if [ -z "$1" ];
    then sudo nano ~/.custom-macOs-bash
    else
    sudo $1 ~/.custom-macOs-bash
    fi

    clear

    progress-bar-cc

    sudo rm -rf ~/custombash
    sleep 2
    cls
}

#log function
function log() {
    clear
    cat ~/.jLog
    echo -n ": "
    read q
    cls
}

#git short commit
function gap() {
    echo "${yellow}adding all files ...$reset"
    git add *
    git add .*
    
    echo "junk log entry `date`" >> ~/.jLog
    echo "~" >> ~/.jLog
    
    if [ -z "$1" ];
    then
    echo " "
    echo "${yellow}commiting Changes ...$reset"
    echo " "
    git commit -m "adding files" >> ~/.jlog
    else
    echo " "
    echo "${yellow}commiting Changes with msg $1 $reset"
    echo " "
    git commit -m "$1" >> ~/.jLog
    fi

    echo " "
    echo "${yellow}Pushing ...$reset"
    echo " "
    git push origin main >> ~/.jLog
    echo "~" >> ~/.jLog
    echo " "
    echo "${green}done$reset"
    sleep 1.5
    cls
}

#git status short
function gst() {
    clear
    echo "${yellow}Current Repo Stat: $reset"
    echo " "
    git status
    echo " "
}

#git log shortcut
function gl() {
    clear
    git log
    cls
}

#automate gitclone ~ remove "./" necessity
function gcl() {
    cls
    
    if [ -z "$1" ];
    then
    echo "${red}-- Args not Provided --$reset"
    sleep 1
    echo " "
    echo "${yellow}resetting ...$reset"
    sleep 2
    clear
    return 0
    fi

    if [ -z "$3" ];
    then ~/gc-lin $1 $2
    else ~/gc-lin $1 $2 $3
    fi

    echo " "
    echo "${yellow}changing directory ... $reset"
    sleep 2
    cls

    if [ -z "$3" ];
    then 
        cd $2
        echo "${orange}$2/ -->$reset"
    else 
        cd "$3/$2"
        echo "${orange}$3/$2/ -->$reset"
    fi

    ls -a
}

#install brew
function brew-init() {
    clear
    echo -n "${yellow}Preparing to Install brew ... $reset"
    sleep 2
    echo "junk log entry `date`" >> ~/.jLog
    echo "~" >> ~/.jLog
    clear
    echo -n "${purple}Installing ...$reset"
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" >> ~/.jLog
    echo "~" >> ~/.jLog
    clear
    echo "${green}done.$reset"
    sleep 3
    cls
}

#ghcli-in
function ghcli-in() {
    clear
    echo "${yellow}Installing GitHub-CLI ...$reset"
    sleep 3
    echo "junk log entry `date`" >> ~/.jLog
    echo "~" >> ~/.jLog
    brew install gh >> ~/.jLog
    echo "~" >> ~/.jLog
    clear
    echo "${green}done.$reset"
    sleep 5
    cls
}

#github cli update
function ghcli-up() {
    clear
    echo "${purple}update sequence activated.$reset"
    sleep 3
    clear
    echo "junk log entry `date`" >> ~/.jLog
    echo "~" >> ~/.jLog
    brew upgrade gh >> ~/.jLog
    echo "~" >> ~/.jLog
    clear
    echo "${green}updated.$reset"
    sleep 3
    cls
    gh --version
}

#cc-up
function cc-up() {
    clear
    progress-bar-cc
    rm -rf ~/custombash
    cls
}

#cli login
function ghcli-init() {
    clear
    gh auth login
    clear
    echo "${green}init complete.$reset"
    sleep 3
    cls
}

#cli logout
function ghcli-end() {
    clear
    gh auth logout
    clear
    echo "${green}session ended.$reset"
    sleep 3
    cls
}

#cli auth status
function ghcli() {
    clear
    echo "${yellow} Current Configuration: $reset"
    echo " "
    gh auth status
    sleep 5
    cls
}

#git config add username useremail
function gconfig-ue() {
    clear

    if [ -z "$1" ];
    then
        echo "${red}parameter missing.$reset"
        sleep 3
        cls
        return 0
    fi

    echo "${yellow}Configuring ...$reset"
    git config --global user.name "$1"
    git config --global user.email "$2"
    sleep 1
    clear
    echo "${green}done.$reset"
    sleep 3
    cls
}

#view (default) or edit(param) .gitconfig
function gconfig() {
    clear

    if [ -z "$1" ];
    then
        echo "${yellow}?-- Git CONFIG --?$reset"
        echo " "
        git config --list
        return 0
    else
        $1 ~/.gitconfig
        cls
        return 0
    fi
}

#list current dir or given
function f() {
    cls
    
    if [ -z "$1" ];
    then
        current_directory=```exec pwd```
        echo "${orange}$current_directory/ -->$reset"
        ls
        return 0
    else
        echo "${orange}$1/ -->$reset"
        ls $1
        return 0
    fi
}

#git add short
function gadd() {
    clear
    echo "${yellow}Adding all files to the git index ...$reset"
    git add * 
    git add .*
    sleep 1
    clear
    echo "${green}done.$reset"
    sleep 2
    cls
}

#git push short
function gp-main() {
    clear
    echo "${yellow}Pushing to main branch ...$reset"
    echo " "
    git push origin main
    echo " "
    sleep 1
    echo " "
    clear
    echo "${green}done.$reset"
    sleep 5
    cls
}

#repo list
function reps() {
    cls
    echo "${orange}Repos Found: $reset"
    gh repo list
}

#function for git commit
function gcom() {
    clear
    if [ -z "$1" ]; then
    	git commit
    	clear
    	echo "${green}done.$reset"
    	sleep 2
    	cls
    else
    	echo "${yellow}commiting with msg $1 ...$reset"
    	sleep 1
    	git commit -m $1
    	clear
    	echo "${green}done.$reset"
    	sleep 2
    	cls
    fi
}

#brew update
function brew-up() {
    clear
    echo "${purple}updating brew ...$reset"
    echo "junk log entry `date`" >> ~/.jLog
    echo "~" >> ~/.jLog
    brew update
    echo "~" >> ~/.jLog
    sleep 2
    clear
    echo "${green}done.$reset"
    sleep 2
    cls
}

#update any installed packages
function upg() {
    clear
    if [ -z "$1" ]; then
        echo "${red}No package specified!"
        sleep 2
        cls
        return 0
    fi

    echo  -n "using brew to update $1 ..."
    sleep 2
    echo " "
    echo " "
    echo " "
    brew upgrade $1
    echo " "
    echo "${green}done.$reset"
    sleep 2
    cls
}

#install a package using brew
function get() {
    clear
    if [ -z "$1" ]; then
        echo "${red}No package specified"
        sleep 2
        cls
        return 0
    fi

    echo -n "using brew to install $1 ..."
    sleep 2
    echo " "
    echo " "
    echo " "
    brew install $1
    echo " "
    echo "${green}done.$reset"
    sleep 2
    cls
}

#install a package using brew --cask
function getc() {
    clear
    if [ -z "$1" ]; then
        echo "${red}No package specified"
        sleep 2
        cls
        return 0
    fi

    echo -n "using brew to install cask $1 ..."
    sleep 2
    echo " "
    echo " "
    echo " "
    brew install --cask $1
    echo " "
    echo "${green}done.$reset"
    sleep 2
    cls
}

#clear caches ...
function cache-del() {
    clear
    sudo rm -rf /Library/Caches
    cls
}

#create custom app triggers for terminal
function trigger() {
    clear
    if [ -z "$1" ]; then
        echo "app name missing!"
        sleep 4
        cls
        return 0
    fi

    #edit this file and add a trigger function for the app
    echo " " >> ~/.customTRIGGERS
    echo "#trigger function" >> ~/.customTRIGGERS
    
    if [ -z "$2" ]; then
        echo "function $1() {" >> ~/.customTRIGGERS
    else
        echo "function $2() {" >> ~/.customTRIGGERS
    fi

    echo "    clear" >> ~/.customTRIGGERS

    if [ -z "$3" ]; then
        echo "    echo -n '${purple}opening $1 ...$reset'" >> ~/.customTRIGGERS
    else
        echo "    echo -n '${purple}opening $3 ...$reset'" >> ~/.customTRIGGERS
    fi

    echo "    sleep 2" >> ~/.customTRIGGERS
    echo "    clear" >> ~/.customTRIGGERS
    
    checker="sys"

    if ! [ -z "$4" ]; then #if $4 defined
        if ! [ "$4"=="$checker" ]; then # $4 is mentioned and $4 is not sys
            echo "${red}parameter not recognised '$4'.$reset"
            return 0
        else # $4 is defined and $4 is sys
            echo "    open /System/Applications/$1.app" >> ~/.customTRIGGERS
        fi
    else # $4 parameter is not provided ~ not a system app
        echo "    open /Applications/$1.app" >> ~/.customTRIGGERS
    fi

    echo "    echo -n '${green}done.$reset'" >> ~/.customTRIGGERS
    echo "    sleep 1" >> ~/.customTRIGGERS
    echo "    cls" >> ~/.customTRIGGERS
    echo "}" >> ~/.customTRIGGERS   

    if ! [ -z "$2" ]; then
        if ! [ -z "$3" ]; then
            echo "triggers+=('$2 --> $3')" >> ~/.customTRIGGERS
        else
            echo "triggers+=('$2 --> $1')" >> ~/.customTRIGGERS
        fi
    else
        echo "triggers+=('$1')" >> ~/.customTRIGGERS
    fi

    clear
    echo "junk log entry `date`" >> ~/.jLog
    echo "~" >> ~/.jLog
    echo "trigger init for $1" >> ~/.jLog
    echo "~" >> ~/.jLog

    if [ -z "$3" ]; then
        echo "${green}trigger created for $1.$reset ${red}restart terminal!$reset"
    else
        echo "${green}trigger created for $3.$reset ${red}restart terminal!$reset"
    fi
}

